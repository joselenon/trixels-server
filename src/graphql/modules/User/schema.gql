type User {
  username: String
  avatar: String
  balance: Float
  email: IEmail!
  roninWallet: RoninWalletInfo
  createdAt: Int
}

type UserToFrontEnd {
  username: String
  avatar: String
  balance: Float
  email: IEmail
  roninWallet: RoninWalletInfo
  createdAt: Int
}

type IEmail {
  value: String
  verified: Boolean
  lastEmail: String
  updatedAt: Float
}

type RoninWalletInfo {
  value: String
  verified: Boolean
}

type UserResponse {
  success: Boolean!
  message: String!
  data: User
}

type BalanceData {
  balance: Float
}

type BalanceResponse {
  success: Boolean!
  message: String!
  data: BalanceData!
}

type MessagesResponse {
  success: Boolean!
  message: String!
  type: String!
  data: String!
  request: String
}

type Query {
  getUser(steamid: String): UserResponse!
  getBalance: BalanceResponse!
}

type Subscription {
  getLiveBalance: BalanceResponse!
  getLiveMessages: MessagesResponse!
}
